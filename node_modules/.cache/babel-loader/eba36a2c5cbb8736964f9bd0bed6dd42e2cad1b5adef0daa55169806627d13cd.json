{"ast":null,"code":"const fetchData = async file => {\n  const response = await fetch(`/${file}.json`); // Ruta al archivo JSON en la carpeta public\n  if (response.ok) {\n    return response.json();\n  } else {\n    throw new Error('Failed to fetch data');\n  }\n};\nconst listaVideos = async () => {\n  try {\n    const data = await fetchData();\n    return data.videos;\n  } catch (error) {\n    console.error('Error fetching video data:', error);\n    throw new Error('Error fetching video data');\n  }\n};\nconst cadastraVideo = async (titulo, url, img, categoria, descricao, codigo) => {\n  try {\n    const data = await fetchData('data');\n    const newVideo = {\n      id: data.videos.length + 1,\n      titulo: titulo,\n      url: url,\n      img: img,\n      categoria: categoria,\n      descricao: descricao,\n      codigo: codigo\n    };\n    data.videos.push(newVideo);\n    // Aquí deberías escribir el archivo actualizado de vuelta al sistema de archivos\n    return newVideo;\n  } catch (error) {\n    console.error('Error registering video:', error);\n    throw new Error('Não foi possível cadastrar um video.');\n  }\n};\nconst video = async id => {\n  try {\n    const data = await fetchData('data');\n    const foundVideo = data.videos.find(video => video.id === id);\n    if (foundVideo) {\n      return foundVideo;\n    }\n    throw new Error('Não foi possivel encontrar Video.');\n  } catch (error) {\n    console.error('Error fetching video:', error);\n    throw new Error('Não foi possivel encontrar Video.');\n  }\n};\nconst listaCategorias = async () => {\n  try {\n    const data = await fetchData('categoria');\n    return data.categorias;\n  } catch (error) {\n    console.error('Error fetching categories:', error);\n    throw new Error('Error fetching categories');\n  }\n};\nconst cadastraCategoria = async (nome, descricao, cor, codigo) => {\n  try {\n    const data = await fetchData('categoria');\n    const newCategoria = {\n      id: data.categorias.length + 1,\n      nome: nome,\n      descricao: descricao,\n      cor: cor,\n      codigo: codigo\n    };\n    data.categorias.push(newCategoria);\n    // Aquí deberías escribir el archivo actualizado de vuelta al sistema de archivos\n    return newCategoria;\n  } catch (error) {\n    console.error('Error registering category:', error);\n    throw new Error('Não foi possível cadastrar uma Categoria.');\n  }\n};\nconst removeCategoria = async id => {\n  try {\n    const data = await fetchData('categoria');\n    const updatedCategorias = data.categorias.filter(categoria => categoria.id !== id);\n    if (updatedCategorias.length === data.categorias.length) {\n      throw new Error('Não foi possível remover a categoria.');\n    }\n    data.categorias = updatedCategorias;\n    // Aquí deberías escribir el archivo actualizado de vuelta al sistema de archivos\n  } catch (error) {\n    console.error('Error removing category:', error);\n    throw new Error('Não foi possível remover a categoria.');\n  }\n};\nconst editaCategoria = async (id, nome, descricao, cor, codigo) => {\n  try {\n    const data = await fetchData('categoria');\n    const categoriaIndex = data.categorias.findIndex(categoria => categoria.id === id);\n    if (categoriaIndex === -1) {\n      throw new Error('Não foi possível editar categoria.');\n    }\n    data.categorias[categoriaIndex] = {\n      id: id,\n      nome: nome,\n      descricao: descricao,\n      cor: cor,\n      codigo: codigo\n    };\n    // Aquí deberías escribir el archivo actualizado de vuelta al sistema de archivos\n    return data.categorias[categoriaIndex];\n  } catch (error) {\n    console.error('Error editing category:', error);\n    throw new Error('Não foi possível editar categoria.');\n  }\n};\nexport const videosService = {\n  listaVideos,\n  cadastraVideo,\n  listaCategorias,\n  cadastraCategoria,\n  removeCategoria,\n  editaCategoria,\n  video\n};","map":{"version":3,"names":["fetchData","file","response","fetch","ok","json","Error","listaVideos","data","videos","error","console","cadastraVideo","titulo","url","img","categoria","descricao","codigo","newVideo","id","length","push","video","foundVideo","find","listaCategorias","categorias","cadastraCategoria","nome","cor","newCategoria","removeCategoria","updatedCategorias","filter","editaCategoria","categoriaIndex","findIndex","videosService"],"sources":["C:/Users/PC/IdeaProjects/alura-flix/src/Service/videos-service.js"],"sourcesContent":["const fetchData = async (file) => {\r\n  const response = await fetch(`/${file}.json`);  // Ruta al archivo JSON en la carpeta public\r\n  if (response.ok) {\r\n    return response.json();\r\n  } else {\r\n    throw new Error('Failed to fetch data');\r\n  }\r\n};\r\nconst listaVideos = async () => {\r\n  try {\r\n    const data = await fetchData();\r\n    return data.videos;\r\n  } catch (error) {\r\n    console.error('Error fetching video data:', error);\r\n    throw new Error('Error fetching video data');\r\n  }\r\n};\r\n\r\nconst cadastraVideo = async (titulo, url, img, categoria, descricao, codigo) => {\r\n  try {\r\n    const data = await fetchData('data');\r\n    const newVideo = {\r\n      id: data.videos.length + 1,\r\n      titulo: titulo,\r\n      url: url,\r\n      img: img,\r\n      categoria: categoria,\r\n      descricao: descricao,\r\n      codigo: codigo\r\n    };\r\n    data.videos.push(newVideo);\r\n    // Aquí deberías escribir el archivo actualizado de vuelta al sistema de archivos\r\n    return newVideo;\r\n  } catch (error) {\r\n    console.error('Error registering video:', error);\r\n    throw new Error('Não foi possível cadastrar um video.');\r\n  }\r\n};\r\n\r\nconst video = async (id) => {\r\n  try {\r\n    const data = await fetchData('data');\r\n    const foundVideo = data.videos.find(video => video.id === id);\r\n    if (foundVideo) {\r\n      return foundVideo;\r\n    }\r\n    throw new Error('Não foi possivel encontrar Video.');\r\n  } catch (error) {\r\n    console.error('Error fetching video:', error);\r\n    throw new Error('Não foi possivel encontrar Video.');\r\n  }\r\n};\r\n\r\nconst listaCategorias = async () => {\r\n  try {\r\n    const data = await fetchData('categoria');\r\n    return data.categorias;\r\n  } catch (error) {\r\n    console.error('Error fetching categories:', error);\r\n    throw new Error('Error fetching categories');\r\n  }\r\n};\r\n\r\nconst cadastraCategoria = async (nome, descricao, cor, codigo) => {\r\n  try {\r\n    const data = await fetchData('categoria');\r\n    const newCategoria = {\r\n      id: data.categorias.length + 1,\r\n      nome: nome,\r\n      descricao: descricao,\r\n      cor: cor,\r\n      codigo: codigo\r\n    };\r\n    data.categorias.push(newCategoria);\r\n    // Aquí deberías escribir el archivo actualizado de vuelta al sistema de archivos\r\n    return newCategoria;\r\n  } catch (error) {\r\n    console.error('Error registering category:', error);\r\n    throw new Error('Não foi possível cadastrar uma Categoria.');\r\n  }\r\n};\r\n\r\nconst removeCategoria = async (id) => {\r\n  try {\r\n    const data = await fetchData('categoria');\r\n    const updatedCategorias = data.categorias.filter(categoria => categoria.id !== id);\r\n    if (updatedCategorias.length === data.categorias.length) {\r\n      throw new Error('Não foi possível remover a categoria.');\r\n    }\r\n    data.categorias = updatedCategorias;\r\n    // Aquí deberías escribir el archivo actualizado de vuelta al sistema de archivos\r\n  } catch (error) {\r\n    console.error('Error removing category:', error);\r\n    throw new Error('Não foi possível remover a categoria.');\r\n  }\r\n};\r\n\r\nconst editaCategoria = async (id, nome, descricao, cor, codigo) => {\r\n  try {\r\n    const data = await fetchData('categoria');\r\n    const categoriaIndex = data.categorias.findIndex(categoria => categoria.id === id);\r\n    if (categoriaIndex === -1) {\r\n      throw new Error('Não foi possível editar categoria.');\r\n    }\r\n    data.categorias[categoriaIndex] = {\r\n      id: id,\r\n      nome: nome,\r\n      descricao: descricao,\r\n      cor: cor,\r\n      codigo: codigo\r\n    };\r\n    // Aquí deberías escribir el archivo actualizado de vuelta al sistema de archivos\r\n    return data.categorias[categoriaIndex];\r\n  } catch (error) {\r\n    console.error('Error editing category:', error);\r\n    throw new Error('Não foi possível editar categoria.');\r\n  }\r\n};\r\nexport const videosService = {\r\n  listaVideos,\r\n  cadastraVideo,\r\n  listaCategorias,\r\n  cadastraCategoria,\r\n  removeCategoria,\r\n  editaCategoria,\r\n  video\r\n};\r\n"],"mappings":"AAAA,MAAMA,SAAS,GAAG,MAAOC,IAAI,IAAK;EAChC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,IAAGF,IAAK,OAAM,CAAC,CAAC,CAAE;EAChD,IAAIC,QAAQ,CAACE,EAAE,EAAE;IACf,OAAOF,QAAQ,CAACG,IAAI,EAAE;EACxB,CAAC,MAAM;IACL,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EACzC;AACF,CAAC;AACD,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC9B,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMR,SAAS,EAAE;IAC9B,OAAOQ,IAAI,CAACC,MAAM;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAM,IAAIJ,KAAK,CAAC,2BAA2B,CAAC;EAC9C;AACF,CAAC;AAED,MAAMM,aAAa,GAAG,MAAAA,CAAOC,MAAM,EAAEC,GAAG,EAAEC,GAAG,EAAEC,SAAS,EAAEC,SAAS,EAAEC,MAAM,KAAK;EAC9E,IAAI;IACF,MAAMV,IAAI,GAAG,MAAMR,SAAS,CAAC,MAAM,CAAC;IACpC,MAAMmB,QAAQ,GAAG;MACfC,EAAE,EAAEZ,IAAI,CAACC,MAAM,CAACY,MAAM,GAAG,CAAC;MAC1BR,MAAM,EAAEA,MAAM;MACdC,GAAG,EAAEA,GAAG;MACRC,GAAG,EAAEA,GAAG;MACRC,SAAS,EAAEA,SAAS;MACpBC,SAAS,EAAEA,SAAS;MACpBC,MAAM,EAAEA;IACV,CAAC;IACDV,IAAI,CAACC,MAAM,CAACa,IAAI,CAACH,QAAQ,CAAC;IAC1B;IACA,OAAOA,QAAQ;EACjB,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAM,IAAIJ,KAAK,CAAC,sCAAsC,CAAC;EACzD;AACF,CAAC;AAED,MAAMiB,KAAK,GAAG,MAAOH,EAAE,IAAK;EAC1B,IAAI;IACF,MAAMZ,IAAI,GAAG,MAAMR,SAAS,CAAC,MAAM,CAAC;IACpC,MAAMwB,UAAU,GAAGhB,IAAI,CAACC,MAAM,CAACgB,IAAI,CAACF,KAAK,IAAIA,KAAK,CAACH,EAAE,KAAKA,EAAE,CAAC;IAC7D,IAAII,UAAU,EAAE;MACd,OAAOA,UAAU;IACnB;IACA,MAAM,IAAIlB,KAAK,CAAC,mCAAmC,CAAC;EACtD,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAM,IAAIJ,KAAK,CAAC,mCAAmC,CAAC;EACtD;AACF,CAAC;AAED,MAAMoB,eAAe,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,MAAMlB,IAAI,GAAG,MAAMR,SAAS,CAAC,WAAW,CAAC;IACzC,OAAOQ,IAAI,CAACmB,UAAU;EACxB,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAM,IAAIJ,KAAK,CAAC,2BAA2B,CAAC;EAC9C;AACF,CAAC;AAED,MAAMsB,iBAAiB,GAAG,MAAAA,CAAOC,IAAI,EAAEZ,SAAS,EAAEa,GAAG,EAAEZ,MAAM,KAAK;EAChE,IAAI;IACF,MAAMV,IAAI,GAAG,MAAMR,SAAS,CAAC,WAAW,CAAC;IACzC,MAAM+B,YAAY,GAAG;MACnBX,EAAE,EAAEZ,IAAI,CAACmB,UAAU,CAACN,MAAM,GAAG,CAAC;MAC9BQ,IAAI,EAAEA,IAAI;MACVZ,SAAS,EAAEA,SAAS;MACpBa,GAAG,EAAEA,GAAG;MACRZ,MAAM,EAAEA;IACV,CAAC;IACDV,IAAI,CAACmB,UAAU,CAACL,IAAI,CAACS,YAAY,CAAC;IAClC;IACA,OAAOA,YAAY;EACrB,CAAC,CAAC,OAAOrB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAM,IAAIJ,KAAK,CAAC,2CAA2C,CAAC;EAC9D;AACF,CAAC;AAED,MAAM0B,eAAe,GAAG,MAAOZ,EAAE,IAAK;EACpC,IAAI;IACF,MAAMZ,IAAI,GAAG,MAAMR,SAAS,CAAC,WAAW,CAAC;IACzC,MAAMiC,iBAAiB,GAAGzB,IAAI,CAACmB,UAAU,CAACO,MAAM,CAAClB,SAAS,IAAIA,SAAS,CAACI,EAAE,KAAKA,EAAE,CAAC;IAClF,IAAIa,iBAAiB,CAACZ,MAAM,KAAKb,IAAI,CAACmB,UAAU,CAACN,MAAM,EAAE;MACvD,MAAM,IAAIf,KAAK,CAAC,uCAAuC,CAAC;IAC1D;IACAE,IAAI,CAACmB,UAAU,GAAGM,iBAAiB;IACnC;EACF,CAAC,CAAC,OAAOvB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAM,IAAIJ,KAAK,CAAC,uCAAuC,CAAC;EAC1D;AACF,CAAC;AAED,MAAM6B,cAAc,GAAG,MAAAA,CAAOf,EAAE,EAAES,IAAI,EAAEZ,SAAS,EAAEa,GAAG,EAAEZ,MAAM,KAAK;EACjE,IAAI;IACF,MAAMV,IAAI,GAAG,MAAMR,SAAS,CAAC,WAAW,CAAC;IACzC,MAAMoC,cAAc,GAAG5B,IAAI,CAACmB,UAAU,CAACU,SAAS,CAACrB,SAAS,IAAIA,SAAS,CAACI,EAAE,KAAKA,EAAE,CAAC;IAClF,IAAIgB,cAAc,KAAK,CAAC,CAAC,EAAE;MACzB,MAAM,IAAI9B,KAAK,CAAC,oCAAoC,CAAC;IACvD;IACAE,IAAI,CAACmB,UAAU,CAACS,cAAc,CAAC,GAAG;MAChChB,EAAE,EAAEA,EAAE;MACNS,IAAI,EAAEA,IAAI;MACVZ,SAAS,EAAEA,SAAS;MACpBa,GAAG,EAAEA,GAAG;MACRZ,MAAM,EAAEA;IACV,CAAC;IACD;IACA,OAAOV,IAAI,CAACmB,UAAU,CAACS,cAAc,CAAC;EACxC,CAAC,CAAC,OAAO1B,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAM,IAAIJ,KAAK,CAAC,oCAAoC,CAAC;EACvD;AACF,CAAC;AACD,OAAO,MAAMgC,aAAa,GAAG;EAC3B/B,WAAW;EACXK,aAAa;EACbc,eAAe;EACfE,iBAAiB;EACjBI,eAAe;EACfG,cAAc;EACdZ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}